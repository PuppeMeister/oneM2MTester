/**
 *  Copyright Notification
 *  No part of this document may be reproduced, in an electronic retrieval system or otherwise, except as authorized by written permission.
 *  The copyright and the foregoing restriction extend to reproduction in all media.
 *  Â© 2016, oneM2M Partners Type 1 (ARIB, ATIS, CCSA, ETSI, TIA, TSDSI, TTA, TTC).
 *  All rights reserved.
 *  
 *  @author     oneM2M/ETSI
 *  @desc       Module containing Pixits for oneM2M
 *
 */
module OneM2M_Pixits {
	
	import from XSD all;
	import from OneM2M_Types all;
	
	group TestAdapterParameters {}

	
		group IutParameters {
			
			/**
			 * @desc IUT CSE IN role 
			 */
			modulepar boolean PX_IN_CSE	:= true; 

			/**
			 * @desc IUT CSE MN role 
			 */			
			modulepar boolean PX_MN_CSE	:= false; 

			/**
			 * @desc IUT CSE ASN role 
			 */						
			modulepar boolean PX_ASN_CSE:= false; 
		
			/**
			 * @desc IUT Upper Tester interface support 
			 */
			modulepar boolean PX_UT_IMPLEMENTED := false;
			
			/**
			 * @desc IUT CSE Name
			 */	
			modulepar XSD.ID PX_CSE_NAME := "CSE-NAME";
		
			/**
			 * @desc IUT CSE-ID with SP-relative-CSE-ID format (relative) according to TS-0001-7.2-1
			 */		
			modulepar XSD.ID PX_CSE_ID := "/CSE-ID";
			
			/**
			 * @desc IUT CSE resource ID with Unstructured-CSE-relative-Resource-ID (relative) format according to TS-0001-7.2-1
			 */			
			modulepar XSD.ID PX_CSE_RESOURCE_ID	:= "CSE-ID";
			 
			/**
			 * @desc IUT M2M-SP-ID with M2M-SP-ID format (absolute) according to TS-0001-7.2-1 Unstructured-CSE-relative -Resource-ID
			 */
			modulepar XSD.ID PX_SP_ID := "//CSE-SP-ID";

			/**
			 * @desc AE-ID with privileges to CREATE at the IUT CSEBase with AE-ID-Stem format (relative) according to TS-0001-7.2-1
			 */	
			modulepar XSD.ID PX_SUPER_AE_ID				:= "admin:admin";
	
			/**
			 * @desc CSE-ID with privileges to CREATE at the IUT CSEBase with SP-relative-CSE-ID format (relative) according to TS-0001-7.2-1
			 */	
			modulepar XSD.ID PX_SUPER_CSE_ID				:= "admin:admin";	

			/**
			 * @desc Allowed AE-IDs starting with C 
			 */			
			modulepar XSD.IDREFS PX_ALLOWED_C_AE_IDS := {"C-AllowedAeId"};

			/**
			 * @desc Not allowed AE-IDs starting with C 
			 */			
			modulepar XSD.IDREFS PX_NOT_ALLOWED_C_AE_IDS := {"C-NotAllowedAeId"};

			/**
			 * @desc Allowed AE-IDs starting with S 
			 */			
			modulepar XSD.IDREFS PX_ALLOWED_S_AE_IDS := {"S-AllowedAeId"};
			
			/**
			 * @desc Not allowed AE-IDs starting with S 
			 */			
			modulepar XSD.IDREFS PX_NOT_ALLOWED_S_AE_IDS := {"S-NotAllowedAeId"};
			
			/**
			 * @desc Not allowed App-ID 
			 */			
			modulepar XSD.ID PX_NOT_ALLOWED_APP_ID := "NotAllowedAppId";
			
			/**
			 * @desc Addressing method to use during test execution 
			 */			
			modulepar AddressingMethod PX_ADDRESSING_METHOD := e_hierarchical;
	
			/**
			 * @desc Primitive scope to use during test execution 
			 */			
			modulepar PrimitiveScope PX_PRIMITIVE_SCOPE 	:= e_cseRelative;
			
			//WebSocket parameters
			modulepar charstring PX_WS_PROTOCOL    := "oneM2M.R2.0.xml";
			modulepar charstring PX_REQUEST_URI    := "/";
			//MQTT parameters
			modulepar charstring PX_HOSTING_CSE_ID := "CSE-ID";
			modulepar charstring PX_CREDENTIAL_ID  := "admin:admin";
			
			    
			/**
			 * @desc Namespace composed of "prefix" = "xml namespace" to use during test execution 
			 */			
			modulepar charstring PX_XML_NAMESPACE 			:= "m2m=""http://www.onem2m.org/xml/protocols""";
			
			/**
			 * @desc Character to indicate "all originators" for AccessControlOriginators element 
			 */			
			modulepar ListOfURIs PX_ACOR 					:= {"all"};
			
			/**
			 * @desc Time given for configuring IUT when required (i.e. when UT not implemented) 
			 */			
			modulepar float PX_TCONFIG_IUT					:= 10.0;
			
		}
		
		group TesterParameters {
	
			/**
			 * @desc Test System settings
			 */
			modulepar AeSimuComponentDesc PX_TS_AE1 := { // AE1 component settings
				aeIdStem := "",
				appId := "NMyApp1Id",
				mcaPort := {
					binding := {
						httpBindingDesc := {
								bindingProtocol := e_http,
								bindingDesc := {
									tsAddress  := "127.0.0.1",
									remotePort := 8080,														// SUT CoAP/HTTP port
									localPort  := 3031,														// Test Adapter client port (for debug purpose only)
									sutAddress := "127.0.0.1"
								}
						}
					},
					serialization := e_xml
				},
				mcaPortIn := {
					binding := {
						httpBindingDesc := {
							bindingProtocol := e_http,
							bindingDesc := {
								tsAddress  := "127.0.0.1",
								remotePort := 8080,
								localPort  := 3041,															// Test Adapter listener port (AeSimu acts as server)
								sutAddress := "127.0.0.1"
							}
						}
					},
					serialization := e_xml
				}
			};
			modulepar AeSimuComponentDesc PX_TS_AE2 := { // AE2 component settings
				aeIdStem := "",
				appId := "NMyApp2Id",
				mcaPort := {
					binding := {
						httpBindingDesc := {
								bindingProtocol := e_http,
								bindingDesc := {
									tsAddress  := "127.0.0.1",
									remotePort := 8080,														// SUT CoAP/HTTP port
									localPort  := 3032,														// Test Adapter client port (for debug purpose only)
									sutAddress := "127.0.0.1"
								}
						}
					},
					serialization := e_xml
				},
				mcaPortIn := {
					binding := {
						httpBindingDesc := {
							bindingProtocol := e_http,
							bindingDesc := {
								tsAddress  := "127.0.0.1",
								remotePort := omit,
								localPort  := 3042,														// Test Adapter listener port (AeSimu acts as server)
								sutAddress := "127.0.0.1"
							}
						}
					},
					serialization := e_xml
				}
			};
			modulepar CseSimuComponentDesc PX_TS_CSE1 := { // CSE1 component settings
				cseName := "CSE1_NAME",
				cseId := "/CSE1_ID",
				cseResourceId := "CSE1_RESOURCE_ID",
				spId := "//onem2m.org",
				supportedResourceType := {int1, int2, int3, int16},
				mcaPort := {
					binding := {
						httpBindingDesc := {
							bindingProtocol := e_http,
							bindingDesc := {
								tsAddress := "127.0.0.1",
								remotePort:= 8080,
								localPort := 3131,
								sutAddress := "127.0.0.1"
							}
						}
					},
					serialization := e_xml
				},
				mcaPortIn := {
					binding := {
						httpBindingDesc := {
							bindingProtocol := e_http,
							bindingDesc := {
								tsAddress := "127.0.0.1",
								remotePort:= 8080,
								localPort  := 3141,
								sutAddress := "127.0.0.1"
							}
						}
					},
					serialization := e_xml
				},
				mccPort := {
					binding := {
						httpBindingDesc := {
							bindingProtocol := e_http,
							bindingDesc := {
								tsAddress := "127.0.0.1",
								remotePort:= 8080,
								localPort := 4131,
								sutAddress := "127.0.0.1"
							}
						}
					},
					serialization := e_xml
				},
				mccPortIn := {
					binding := {
						httpBindingDesc := {
							bindingProtocol := e_http ,
							bindingDesc := {
								tsAddress := "127.0.0.1",
								remotePort:= 8080,
								localPort  := 4141,
								sutAddress := "127.0.0.1"
							}
						}
					},
					serialization := e_xml
				}
			};
			
			modulepar UtDesc PX_TS_UT := { url := "http://127.0.0.1:43000/" };
					
		}
		
		group ExecutionParameters {
		
			/**
			 * @desc Resources to be deleted by TC_DELETE_RESOURCES 
			 */			
			modulepar XSD.IDREFS PX_RESOURCES_TO_BE_DELETED := { "MyAe", "MyAccessControlPolicyResource", "SubscriptionVerificationAcp", "MyAcp", "MyRemoteCSEResource" };
	
			/**
			 * @desc To enable run postamble (for debugging) 
			 */			
			modulepar boolean PX_RUN_POSTAMBLE 				:= true;		
		}
	
	//constant parameters for LOC  
	modulepar LocationTargetID PX_LOCATION_TARGET_ID				:= {alt_ := "{LOCATION-TARGET-ID}"}; //SUPPOSE TO BE RECEIVED FROM LOCATION SERVER
	modulepar XSD.AnyURI PX_LOCATION_SERVER_ADDRESS		:= "{LOCATION-SERVER-ADDRESS}";
	
	modulepar charstring PX_LOCATION_UPDATE_PERIOD			:= "PT10M10S" ;//10 Minute 10 Seconds
	modulepar charstring PX_LOCATION_CONTAINER_NAME		:= "myLoContainer";
	
	modulepar Labels PX_LABELS := {"VALUE_1"}; 	
	modulepar boolean PX_IS_LOC_CONTAINER	:= false;//default //set it to true when the container is created to store location information
	
	modulepar PoaList PX_POA := {""};
	modulepar ResourceTypeList_1 PX_SRT := {int1, int2, int3, int4};
	
}  // end of module

